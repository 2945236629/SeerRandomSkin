//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace SeerRandomSkin.Properties {
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "17.13.0.0")]
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("1,4,8,29,50,104,164,165,166,171,172,174,181,183,192,193,195,224,227,278,306,309,3" +
            "47,353,438,439,447,454,455,468,469,470,490,498,501,503,504,505,508,510,511,515,5" +
            "18,526,530,531,532,544,569,570,584,590,601,603,612,613,614,643,661,678,682,683,6" +
            "95,697,698,729,760,780,781,782,783,784,796,798,799,804,810,811,820,821,834,864,8" +
            "75,880,881,886,905,908,923,927,928,945,950,957,961,962,965,974,987,998,999,1000," +
            "1003,1011,1012,1017,1018,1019,1020,1029,1045,1061,1086,1087,1093,1109,1111,1115," +
            "1121,1122,1155,1156,1165,1166,1167,1168,1177,1179,1187,1189,1201,1202,1204,1215," +
            "1256,1287,1288,1290,1306,1327,1355,1394,1412,1446,1447,1449,1456,1526,1527,1533," +
            "1534,1537,1567,1568,1569,1580,1587,1588,1630,1631,1632,1648,1651,1656,1657,1665," +
            "1669,1678,1679,1680,1681,1700,1715,1730,1745,1746,1748,1756,1776,1777,1802,1806," +
            "1809,1815,1819,1825,1836,1840,1851,1861,1864,1910,1944,1945,1951,1955,1956,1960," +
            "1971,1972,2000,2001,2006,2034,2045,2048,2049,2054,2073,2085,2147,2149,2156,2167," +
            "2168,2172,2173,2174,2175,2178,2186,2197,2206,2218,2219,2234,2242,2247,2250,2257," +
            "2262,2283,2288,2310,2321,2325,2326,2333,2347,2358,2363,2375,2376,2377,2387,2394," +
            "2400,2402,2407,2413,2429,2430,2437,2438,2441,2442,2468,2469,2471,2488,2500,2502," +
            "2503,2508,2516,2520,2521,2533,2535,2545,2580,2591,2606,2607,2612,2619,2620,2625," +
            "2634,2635,2636,2643,2648,2652,2655,2662,2665,2673,2676,2678,2681,2684,2691,2703," +
            "2710,2733,2748,2761,2769,2780,2786,2787,2793,2794,2796,2800,2811,2813,2821,2824," +
            "2825,2835,2837,2839,2840,2842,2843,2849,2850,2852,2853,2858,2859,2861,2873,2875," +
            "2879,2883,2887,2888,2893,2906,2915,2935,2937,2951,2953,2967,2982,2988,2991,3001," +
            "3017,3038,3042,3043,3044,3050,3057,3066,3074,3075,3081,3082,3087,3092,3094,3097," +
            "3102,3103,3104,3105,3110,3111,3112,3113,3117,3118,3122,3128,3129,3134,3137,3140," +
            "3141,3146,3147,3156,3163,3164,3168,3171,3179,3190,3192,3193,3194,3196,3205,3210," +
            "3214,3216,3224,3227,3228,3229,3232,3233,3234,3237,3239,3240,3249,3256,3261,3267," +
            "3273,3289,3290,3293,3294,3295,3296,3302,3303,3304,3305,3307,3308,3309,3311,3312," +
            "3315,3318,3320,3321,3322,3324,3325,3326,3328,3333,3336,3340,3343,3353,3354,3355," +
            "3356,3357,3358,3373,3374,3375,3378,3380,3383,3388,3392,3395,3397,3402,3403,3404," +
            "3414,3418,3421,3425,3430,3435,3436,3437,3439,3440,3443,3446,3455,3456,3458,3461," +
            "3465,3478,3479,3481,3487,3488,3490,3491,3502,3503,3504,3506,3510,3511,3516,3532," +
            "3535,3539,3545,3547,3552,3554,3567,3568,3569,3570,3571,3575,3577,3578,3580,3590," +
            "3612,3626,3631,3643,3645,3649,3655,3663,3664,3665,3668,3669,3676,3679,3683,3685," +
            "3691,3693,3694,3701,3703,3704,3711,3717,3724,3740,3741,3742,3743,3758,3774,3776," +
            "3778,3780,3783,3786,3790,3792,3797,3803,3807,3808,3810,3813,3816,3820,3830,3841," +
            "3842,3845,3857,3858,3861,3866,3867,3873,3875,3879,3883,3888,3889,3891,3892,3898," +
            "3914,3919,3920,3928,3937,3939,3940,3945,3949,3957,3959,3964,3965,3986,3987,3992," +
            "4004,4005,4007,4009,4015,4017,4018,4024,4027,4035,4037,4038,4041,4046,4052,4054," +
            "4055,4057,4061,4064,4065,4068,4074,4081,4086,4088,4093,4097,4101,4106,4107,4110," +
            "4114,4115,4123,4124,4125,4131,4132,4135,4139,4143,4146,4147,4151,4154,4156,4159," +
            "4160,4165,4166,4173,4174,4177,4179,4182,4184,4186,4187,4188,4189,4193,4209,4215," +
            "4219,4221,4222,4231,4233,4237,4240,4241,4242,4246,4247,4249,4250,4251,4252,4253," +
            "4261,4262,4268,4272,4273,4275,4277,4280,4284,4286,4287,4288,4289,4290,4291,4295," +
            "4300,4301,4302,4303,4304,4305,4306,4307,4309,4310,4313,4318,4319,4321,4322,4324," +
            "4325,4327,4328,4329,4330,4331,4333,4334,4338,4340,4342,4345,4347,4352,4353,4356," +
            "4358,4360,4364,4365,4372,4373,4374,4389,4390,4391,4392,4397,4401,4402,4407,4408," +
            "4410,4412,4413,4417,4420,4421,4423,4424,4426,4436,4438,4440,4441,4442,4446,4448," +
            "4449,4451,4455,4456,4458,4459,4461,4462,4465,4466,4467,4469,4472,4477,4480,4481," +
            "4482,4484,4488,4490,4491,4492,4496,4498,4499,4500,4502,4504,4505,4509,4510,4511," +
            "4514,4516,4518,4519,4522,4524,4526,4527,4529,4531,4534,4535,4538,4539,4546,4547," +
            "4548,4551,4552,4553,4554,4555,4557,4559,4560,4566,4567,4569,4572,4573,4574,4577," +
            "4582,4584,4585,4587,4588,4589,4591,4593,4594,4595,4597,4598,4600,4604,4605,4606," +
            "4609,4612,4613,4617,4619,4620,4622,4623,4625,4627,4628,4630,4634,4635,4636,4642," +
            "4643,4644,4646,4648,4649,4650,4651,4652,4653,4654,4655,4656,4658,4661,4662,4663," +
            "4667,4669,4671,4672,4674,4676,4677,4678,4679,4680,4681,4683,4684,4685,4686,4687," +
            "4688,4689,4691,4693,4694,4695,4696,4697,4698,4699,4700,4702,4703,4705,4707,4708," +
            "4709,4710,4711,4712,4713,4714,4715,4716,4717,4718,4719,4720,4721,4722,4723,4724," +
            "4725,5002,5005,5008,5009,5010,5011,5013,5014,5015,5016,5017,5018,5019,5021,5024," +
            "5025,5027,5030,5031,5032,5033,5036,5039,5042,5044,5045,5046,5047,5052,5053,5055," +
            "5056,5057,5058,5059,5060,5061,5062,5063,5064,5069,5071,5072,5073,5074,5075,5111," +
            "5357,5403,5404,5494,5498,5503,5509,5601,5605,5606,5607,5608,5693,5713,5772,5773," +
            "5774,5776,5785,5786,5787,5788,5789,5790,5796,5797,5819,5820,5821,5824,5825,14001" +
            "26,1400129,1400130,1400131,1400132,1400133,1400134,1400138,1400139,1400141,14001" +
            "42,1400143,1400148,1400149,1400150,1400153,1400155,1400158,1400159,1400160,14001" +
            "61,1400163,1400166,1400168,1400170,1400174,1400176,1400178,1400179,1400181,14001" +
            "82,1400183,1400185,1400187,1400189,1400193,1400194,1400195,1400204,1400207,14002" +
            "12,1400213,1400214,1400220,1400224,1400225,1400230,1400231,1400236,1400238,14002" +
            "39,1400246,1400247,1400249,1400250,1400252,1400253,1400256,1400261,1400262,14002" +
            "68,1400269,1400280,1400281,1400283,1400284,1400286,1400287,1400288,1400294,14002" +
            "95,1400297,1400299,1400301,1400302,1400303,1400304,1400305,1400306,1400307,14003" +
            "08,1400309,1400311,1400312,1400313,1400314,1400315,1400317,1400318,1400319,14003" +
            "20,1400321,1400322,1400324,1400325,1400327,1400328,1400329,1400330,1400332,14003" +
            "33,1400334,1400335,1400336,1400337,1400338,1400339,1400340,1400341,1400342,14003" +
            "44,1400345,1400346,1400348,1400349,1400351,1400352,1400354,1400356,1400359,14003" +
            "60,1400361,1400362,1400363,1400364,1400365,1400367,1400369,1400371,1400372,14003" +
            "74,1400375,1400377,1400378,1400379,1400380,1400382,1400383,1400384,1400385,14003" +
            "86,1400387,1400388,1400389,1400392,1400394,1400395,1400396,1400398,1400399,14004" +
            "04,1400409,1400410,1400411,1400412,1400413,1400414,1400415,1400416,1400417,14004" +
            "19,1400420,1400421,1400422,1400427,1400430,1400431,1400433,1400434,1400436,14004" +
            "37,1400438,1400440,1400442,1400445,1400446,1400447,1400448,1400450,1400454,14004" +
            "55,1400457,1400460,1400461,1400464,1400465,1400467,1400468,1400469,1400470,14004" +
            "71,1400472,1400473,1400474,1400475,1400478,1400479,1400480,1400481,1400482,14004" +
            "83,1400486,1400487,1400489,1400490,1400491,1400492,1400493,1400496,1400497,14004" +
            "98,1400501,1400502,1400503,1400507,1400508,1400510,1400511,1400514,1400516,14005" +
            "17,1400519,1400520,1400522,1400523,1400525,1400527,1400528,1400530,1400531,14005" +
            "32,1400534,1400535,1400536,1400537,1400539,1400540,1400541,1400542,1400543,14005" +
            "44,1400545,1400546,1400547,1400548,1400549,1400552,1400553,1400555,1400556,14005" +
            "59,1400560,1400563,1400564,1400565,1400566,1400568,1400569,1400570,1400571,14005" +
            "72,1400575,1400576,1400577,1400578,1400579,1400580,1400582,1400583,1400584,14005" +
            "87,1400588,1400589,1400592,1400593,1400594,1400595,1400596,1400599,1400600,14006" +
            "01,1400604,1400605,1400606,1400607,1400608,1400611,1400613,1400616,1400619,14006" +
            "20,1400621,1400622,1400623,1400634,1400635,1400636,1400639,1400640,1400641,14006" +
            "42,1400644,1400645,1400646,1400650,1400652,1400653,1400654,1400658,1400659,14006" +
            "60,1400661,1400662,1400664,1400665,1400666,1400667,1400669,1400670,1400671,14006" +
            "74,1400675,1400678,1400679,1400680,1400681,1400682,1400683,1400684,1400685,14006" +
            "86,1400687,1400688,1400689,1400690,1400691,1400692,1400693,1400694,1400695,14006" +
            "96,")]
        public string SkinIds {
            get {
                return ((string)(this["SkinIds"]));
            }
            set {
                this["SkinIds"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        public bool IsRandomSkin {
            get {
                return ((bool)(this["IsRandomSkin"]));
            }
            set {
                this["IsRandomSkin"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("5001,5003,5004,5022,5028,5029,5034,5066,5067,5068,5076,5077,5078,5079,5080,5081,5" +
            "082,5083,5084,5085,5086,5087,5088,5089,5090,5091,5092,5093,5094,5095,5096,5097,5" +
            "098,5099,5100,5101,5102,5103,5104,5105,5106,5107,5108,5109,5110,5129,5144,5145,5" +
            "146,5147,5153,5154,5155,5156,5165,5166,5167,5168,5169,5170,5171,5172,5173,5174,5" +
            "175,5176,5177,5178,5179,5180,5181,5182,5183,5184,5185,5186,5187,5188,5189,5190,5" +
            "191,5192,5193,5194,5195,5196,5197,5198,5199,5201,5202,5203,5204,5205,5206,5207,5" +
            "208,5209,5210,5211,5212,5213,5214,5215,5216,5217,5218,5219,5220,5221,5222,5223,5" +
            "224,5225,5226,5227,5228,5229,5230,5231,5232,5239,5240,5241,5242,5243,5244,5245,5" +
            "246,5247,5248,5249,5250,5251,5252,5253,5254,5255,5256,5257,5258,5259,5260,5261,5" +
            "262,5263,5264,5265,5266,5267,5268,5269,5270,5271,5272,5273,5274,5275,5276,5277,5" +
            "278,5279,5280,5281,5282,5283,5284,5285,5286,5287,5288,5289,5290,5318,5319,5320,5" +
            "321,5322,5323,5324,5325,5326,5327,5328,5329,5330,5331,5332,5333,5334,5335,5336,5" +
            "337,5338,5339,5340,5341,5342,5343,5358,5359,5360,5361,5362,5363,5364,5365,5366,5" +
            "367,5368,5369,5370,5371,5372,5373,5374,5375,5376,5377,5378,5379,5380,5381,5382,5" +
            "383,5384,5385,5386,5387,5388,5389,5390,5391,5392,5393,5394,5395,5396,5397,5398,5" +
            "399,5400,5401,5402,5418,5434,5437,5432,5441,5465,5466,5479,5478,5477,5480,5481,5" +
            "482,5483,5484,5485,5486,5487,5488,5489,5510,5512,5517,5529,5530,5531,5532,5566,5" +
            "568,5569,5567,5570,5571,5572,5573,5574,5575,5576,5577,5578,5579,5580,5581,5582,5" +
            "583,5584,5585,5586,5587,5588,5589,5590,5591,5592,5593,5595,5596,5597,5598,5599,5" +
            "600,5602,5603,5604,5609,5764,5765,5767,5768,5769,5049,2690,3011,3083,5020,5038,5" +
            "040,5041,5043,5048,5050,5114,5115,5116,5117,5118,5119,5120,5121,5122,5123,5124,5" +
            "125,5126,5127,5128,5129,5130,5131,5132,5133,5134,5135,5136,5137,5138,5139,5140,5" +
            "141,5142,5143,5144,5145,5146,5147,5148,5149,5150,5151,5152,5153,5154,5155,5156,5" +
            "157,5158,5159,5160,5161,5162,5163,5164,5165,5166,5167,5168,5169,5170,5171,5172,5" +
            "173,5174,5175,5176,5177,5178,5179,5180,5181,5182,5183,5184,5185,5186,5187,5188,5" +
            "189,5190,5191,5192,5193,5195,5196,5197,5198,5199,5200,5201,5202,5203,5204,5205,5" +
            "206,5207,5208,5209,5210,5211,5212,5213,5214,5215,5216,5217,5218,5219,5220,5221,5" +
            "222,5223,5224,5225,5226,5227,5228,5229,5230,5231,5232,5239,5240,5241,5242,5243,5" +
            "244,5245,5246,5247,5248,5249,5250,5251,5252,5253,5254,5255,5256,5257,5258,5259,5" +
            "260,5261,5262,5263,5264,5265,5266,5267,5268,5270,5271,5272,5273,5278,5279,5280,5" +
            "281,5282,5283,5284,5285,5286,5287,5288,5289,5290,5291,5292,5293,5294,5295,5296,5" +
            "297,5298,5299,5300,5301,5302,5303,5304,5305,5306,5307,5308,5309,5310,5311,5312,5" +
            "313,5314,5315,5316,5317,5318,5319,5320,5321,5322,5323,5324,5325,5326,5327,5328,5" +
            "329,5330,5331,5332,5333,5334,5335,5336,5337,5338,5339,5340,5341,5342,5343,5344,5" +
            "345,5346,5347,5348,5349,5350,5351,5352,5353,5354,5355,5356,5358,5359,5360,5361,5" +
            "362,5363,5364,5365,5366,5367,5368,5369,5370,5371,5372,5374,5375,5376,5377,5378,5" +
            "379,5380,5381,5382,5383,5384,5385,5386,5387,5388,5389,5390,5391,5392,5393,5394,5" +
            "395,5396,5397,5398,5399,5400,5401,5402,5405,5406,5407,5408,5409,5410,5411,5412,5" +
            "413,5414,5415,5416,5417,5418,5419,5420,5421,5422,5423,5424,5425,5426,5427,5428,5" +
            "429,5430,5431,5432,5433,5434,5435,5436,5437,5438,5439,5440,5441,5442,5443,5444,5" +
            "445,5446,5447,5448,5449,5450,5451,5452,5453,5454,5455,5456,5457,5458,5459,5460,5" +
            "461,5462,5463,5464,5465,5466,5467,5468,5469,5470,5471,5472,5473,5474,5475,5476,5" +
            "477,5478,5479,5480,5481,5482,5483,5485,5486,5490,5491,5492,5493,5495,5496,5497,5" +
            "499,5500,5501,5502,5504,5505,5506,5507,5508,5511,5512,5513,5514,5515,5516,5517,5" +
            "518,5519,5520,5521,5522,5523,5524,5527,5529,5530,5531,5532,5533,5534,5535,5536,5" +
            "537,5538,5539,5540,5541,5542,5543,5544,5545,5546,5547,5548,5549,5550,5551,5552,5" +
            "553,5554,5555,5556,5557,5558,5559,5560,5561,5562,5563,5564,5565,5566,5567,5568,5" +
            "569,5570,5571,5572,5573,5574,5575,5576,5577,5578,5581,5582,5583,5584,5585,5586,5" +
            "587,5588,5589,5590,5591,5592,5593,5595,5596,5597,5598,5599,5600,5602,5603,5604,5" +
            "768,5769,5781,5800,1300067,1300068,1300081,1300082,1300105,1300106,1300107,13001" +
            "08,1300125,1300174,1300228,1300229,1300304,1300305,1300370,1300371,1300433,13004" +
            "58,1300594,1300604,1300605,1300606,1300674,1300748,1300749,1300750,1300799,13008" +
            "73,1300943,1300948,1300999,1301014,1400005,1400006,1400007,1400008,1400009,14000" +
            "10,1400011,1400012,1400013,1400014,1400015,1400017,1400018,1400019,1400020,14000" +
            "21,1400022,1400023,1400024,1400025,1400026,1400027,1400028,1400029,1400030,14000" +
            "31,1400032,1400033,1400034,1400035,1400036,1400037,1400038,1400039,1400040,14000" +
            "41,1400042,1400043,1400046,1400047,1400048,1400049,1400050,1400051,1400052,14000" +
            "53,1400054,1400055,1400056,1400057,1400058,1400059,1400060,1400061,1400062,14000" +
            "63,1400064,1400065,1400066,1400067,1400068,1400069,1400070,1400071,1400072,14000" +
            "73,1400074,1400075,1400076,1400077,1400078,1400079,1400080,1400081,1400082,14000" +
            "83,1400084,1400085,1400086,1400087,1400088,1400089,1400090,1400091,1400092,14000" +
            "93,1400094,1400095,1400096,1400097,1400098,1400099,1400100,1400101,1400102,14001" +
            "03,1400104,1400105,1400106,1400107,1400108,1400109,1400110,1400111,1400112,14001" +
            "13,1400114,1400115,1400116,1400117,1400118,1400119,1400120,1400121,1400122,14001" +
            "23,1400124,1400125,1400127,1400128,1400191,1400196,1400197,1400199,1400200,14002" +
            "03,1400211,1400270,1400271,1400272,1400273,1400274,1400275,1400276,1400428,14004" +
            "76,1400484,1400524,1400550,1400574,1400581,1400585,1400591,1400598,1400602,")]
        public string SkinBlackList {
            get {
                return ((string)(this["SkinBlackList"]));
            }
            set {
                this["SkinBlackList"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("{}")]
        public string SeerCloth {
            get {
                return ((string)(this["SeerCloth"]));
            }
            set {
                this["SeerCloth"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("")]
        public string BrowserFont {
            get {
                return ((string)(this["BrowserFont"]));
            }
            set {
                this["BrowserFont"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("976")]
        public decimal WinWidth {
            get {
                return ((decimal)(this["WinWidth"]));
            }
            set {
                this["WinWidth"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("624")]
        public decimal WinHeight {
            get {
                return ((decimal)(this["WinHeight"]));
            }
            set {
                this["WinHeight"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("")]
        public string AutoExecuteSoftwarePath1 {
            get {
                return ((string)(this["AutoExecuteSoftwarePath1"]));
            }
            set {
                this["AutoExecuteSoftwarePath1"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("998")]
        public int SkinRangeFloor {
            get {
                return ((int)(this["SkinRangeFloor"]));
            }
            set {
                this["SkinRangeFloor"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("2147483647")]
        public int SkinRangeCeiling {
            get {
                return ((int)(this["SkinRangeCeiling"]));
            }
            set {
                this["SkinRangeCeiling"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("")]
        public string RandomSkinExclusion {
            get {
                return ((string)(this["RandomSkinExclusion"]));
            }
            set {
                this["RandomSkinExclusion"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool IsUseSocketHack {
            get {
                return ((bool)(this["IsUseSocketHack"]));
            }
            set {
                this["IsUseSocketHack"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("")]
        public string AutoExecuteSoftwarePath2 {
            get {
                return ((string)(this["AutoExecuteSoftwarePath2"]));
            }
            set {
                this["AutoExecuteSoftwarePath2"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("")]
        public string AutoExecuteSoftwarePath3 {
            get {
                return ((string)(this["AutoExecuteSoftwarePath3"]));
            }
            set {
                this["AutoExecuteSoftwarePath3"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("1")]
        public string FlashZoom {
            get {
                return ((string)(this["FlashZoom"]));
            }
            set {
                this["FlashZoom"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("{\r\n  \"pve-出招-84\": \"// 表姐、六界 弹伤，圣谱 补刀\\nWxSc.OnFirstRound = () => {\\n  WxSc.帝皇之御 = " +
            "3512;\\n  WxSc.六界帝神 = 3329;\\n  WxSc.六界神王 = 3045;\\n  WxSc.圣灵谱尼 = 5000;\\n  WxSc.Uti" +
            "l.UseSkill(31505);\\n};\\n\\nWxSc.OnUseSkill = async (mySkillInfo) => {\\n  await Wx" +
            "Sc.Util.DelayAsync(WxSc.Const.DelayMs);\\n  let petID = WxSc.Util.GetFightingPetI" +
            "D();\\n  if (mySkillInfo.remainHP !== 0) {\\n    WxSc.Util.UseSkill(mySkillInfo.sk" +
            "illList[0][0]);\\n  }\\n  else {\\n    let changePetIDArray = [];\\n    if (WxSc.帝皇之" +
            "御 === petID) { changePetIDArray.push(WxSc.六界帝神); changePetIDArray.push(WxSc.六界神王" +
            "); }\\n    else if (WxSc.六界神王 === petID || WxSc.六界帝神 === petID) { changePetIDArra" +
            "y[0] = WxSc.圣灵谱尼; }\\n    WxSc.Util.ChangePetByID(changePetIDArray);\\n  }\\n};\\n\\n" +
            "WxSc.OnChangePet = (petInfo) => {\\n  let petID = petInfo.petID;\\n  if (WxSc.六界帝神" +
            " === petID || WxSc.六界神王 === petID) { WxSc.Util.UseSkill(19314); }\\n  else if (Wx" +
            "Sc.圣灵谱尼 === petID) { WxSc.Util.UseSkill(31143); }\\n  else { WxSc.Util.UseSkill(0" +
            "); }\\n};\\n\\nWxSc.OnFightOver = () => {};\",\r\n  \"pve-出招-一直第一\": \"WxSc.OnFirstRound " +
            "= () => {\\n  let firstPetCatchtime = WxSc.Util.GetFightingPetCatchTime();\\n  for" +
            " (let pet of WxSc.Util.GetFightingPets()) {\\n    if (pet.catchTime === firstPetC" +
            "atchtime) {\\n      WxSc.Util.UseSkill(pet.skillArray[0]);\\n      break;\\n    }\\n" +
            "  }\\n};\\n\\nWxSc.OnUseSkill = async (mySkillInfo) => {\\n  await WxSc.Util.DelayAs" +
            "ync(WxSc.Const.DelayMs);\\n  if (mySkillInfo.remainHP !== 0) {\\n    let skillList" +
            " = mySkillInfo.skillList;\\n    if (skillList[0][1] > 0) {\\n      WxSc.Util.UseSk" +
            "ill(skillList[0][0]);\\n    }\\n    else {\\n      WxSc.Util.UsePetItem10PP();\\n   " +
            " }\\n  }\\n  else {\\n    WxSc.Util.ChangePetByID([]);\\n  }\\n};\\n\\nWxSc.OnChangePet" +
            " = (petInfo) => {\\n  let skillList = petInfo.skillList;\\n  WxSc.Util.UseSkill(sk" +
            "illList[0][0]);\\n};\\n\\nWxSc.OnFightOver = () => {};\",\r\n  \"pve-出招-一直第五\": \"// 适用于 " +
            "pve，没有考虑 pvp 的复杂情况（例如被逐界苍星锁住技能）\\n// 如果上场的精灵有特殊的第五技能，就像武心婵那样，无法立刻使用的，请自行添加代码处理\\nW" +
            "xSc.OnFirstRound = () => {\\n  let firstPetCatchtime = WxSc.Util.GetFightingPetCa" +
            "tchTime();\\n  for (let pet of WxSc.Util.GetFightingPets()) {\\n    if (pet.catchT" +
            "ime === firstPetCatchtime) {\\n      WxSc.Util.UseSkill(pet.hideSKill === null ? " +
            "pet.skillArray[0] : pet.hideSKill.id); // 若无第五，则用一技能\\n      break;\\n    }\\n  }\\n" +
            "};\\n\\nWxSc.OnUseSkill = async (mySkillInfo) => {\\n  await WxSc.Util.DelayAsync(W" +
            "xSc.Const.DelayMs); // 出招间隔太短会掉线，默认是200ms\\n  let petID = WxSc.Util.GetFightingPe" +
            "tID();\\n  if (mySkillInfo.remainHP !== 0) {\\n    let skillList = mySkillInfo.ski" +
            "llList;\\n    let i = skillList.length < 5 ? 0 : 4;\\n    if (skillList[i][1] > 0)" +
            " {\\n      WxSc.Util.UseSkill(skillList[i][0]);\\n    }\\n    else {\\n      WxSc.Ut" +
            "il.UsePetItem10PP();\\n    }\\n  }\\n  else {\\n    WxSc.Util.ChangePetByID([]);\\n  " +
            "}\\n};\\n\\nWxSc.OnChangePet = (petInfo) => {\\n  let skillList = petInfo.skillList;" +
            "\\n  WxSc.Util.UseSkill(skillList[skillList.length < 5 ? 0 : 4][0]);\\n};\\n\\nWxSc." +
            "OnFightOver = () => {};\",\r\n  \"pve-出招-对战信息\": \"((fight) => {\\n  let originOnFirstR" +
            "ound = fight[\'OnFirstRound\'];\\n  fight[\'OnFirstRound\'] = (fightStartInfo) => {\\n" +
            "    console.log(`【${fightStartInfo.myInfo.petName}】vs【${fightStartInfo.otherInfo" +
            ".petName}】`);\\n    originOnFirstRound(fightStartInfo);\\n  }\\n\\n  let originUseSk" +
            "ill = fight[\'OnUseSkill\'];\\n  fight[\'OnUseSkill\'] = (mySkillInfo,enemySkillInfo," +
            "isMeFirst) => {\\n    console.log(`[${WxSc.Util.GetRound()}] ${isMeFirst ? \'我\' : " +
            "\'敌\'}方先手`);\\n    console.log(` 我方${(mySkillInfo.skillID===0 ? \'没有出招\' : \'使用技能 [\' +" +
            " WxSc.Util.GetSkillNameByID(mySkillInfo.skillID) + \']\')}`);\\n    console.log(` 敌" +
            "方${(enemySkillInfo.skillID===0? \'没有出招\' : \'使用技能 [\' + WxSc.Util.GetSkillNameByID(e" +
            "nemySkillInfo.skillID) + \']\')}`);\\n    originUseSkill(mySkillInfo,enemySkillInfo" +
            ",isMeFirst);\\n  }\\n\\n  let originChangePet = fight[\'OnChangePet\'];\\n  fight[\'OnC" +
            "hangePet\'] = (petInfo) => {\\n    console.log(`【${WxSc.Util.GetPetNameByID(petInf" +
            "o.petID)}】登场`);\\n    originChangePet(petInfo);\\n  }\\n})(WxSc);\",\r\n  \"pve-出招-弹伤-蒂" +
            "朵\": \"// 草王、蒂朵、克罗、六界 弹伤，1级时空 补刀\\n\\nWxSc.OnFirstRound = (fightStartInfo) => {\\n  W" +
            "xSc.茉蕊儿 = 3322;\\n  WxSc.六界帝神 = 3329;\\n  WxSc.克罗 = 2977;\\n  WxSc.蒂朵 = 4377;\\n  Wx" +
            "Sc.时空 = 3463;\\n  WxSc.蒂朵首次上场 = true;\\n  WxSc.Util.UseSkill(0);\\n};\\n\\nWxSc.OnUse" +
            "Skill = async (mySkillInfo,enemySkillInfo) => {\\n  await WxSc.Util.DelayAsync(Wx" +
            "Sc.Const.DelayMs);\\n  let petID = WxSc.Util.GetFightingPetID();\\n  if (mySkillIn" +
            "fo.remainHP !== 0) {\\n    WxSc.Util.UseSkill(0);\\n  }\\n  else {\\n    let ids = [" +
            "];\\n    if (WxSc.茉蕊儿 === petID || WxSc.克罗 === petID) { ids.push(WxSc.蒂朵); }\\n   " +
            " else if (WxSc.蒂朵 === petID) { ids.push(WxSc.六界帝神); }\\n    else if (WxSc.六界帝神 ==" +
            "= petID) { ids.push(WxSc.时空); }\\n    WxSc.Util.ChangePetByID(ids);\\n  }\\n};\\n\\nW" +
            "xSc.OnChangePet = (petInfo) => {\\n  let petID = petInfo.petID;\\n  if (WxSc.蒂朵 ==" +
            "= petID) {\\n    if (WxSc.蒂朵首次上场) {\\n      WxSc.Util.ChangePetByID([WxSc.克罗]);\\n " +
            "     WxSc.蒂朵首次上场 = false;\\n    } else {\\n      WxSc.Util.UseSkill(35914);\\n    }" +
            "\\n  }\\n  else if (WxSc.六界帝神 === petID) { WxSc.Util.UseSkill(19314); }\\n  else if" +
            " (WxSc.时空 === petID) { WxSc.Util.UseSkill(31252); }\\n  else { WxSc.Util.UseSkill" +
            "(0); }\\n};\\n\\nWxSc.OnFightOver = (fightOverInfo) => {};\",\r\n  \"pve-出招-月华\": \"WxSc." +
            "OnFirstRound = () => {\\n  WxSc.阴晴圆缺 = 36354;\\n  WxSc.悲欢离合 = 36353;\\n  WxSc.flag " +
            "= true;\\n  WxSc.Util.UseSkill(WxSc.阴晴圆缺);\\n};\\n\\nWxSc.OnUseSkill = async (mySkil" +
            "lInfo) => {\\n  await WxSc.Util.DelayAsync(WxSc.Const.DelayMs); \\n  if (mySkillIn" +
            "fo.remainHP === 0) {\\n    console.log(\'GG!\');\\n    return;\\n  }\\n  for (var skil" +
            "l of mySkillInfo.skillList) {\\n    if (skill[0] === WxSc.阴晴圆缺) {\\n      if (skil" +
            "l[1] === 0) {\\n        WxSc.Util.UsePetItem10PP();\\n        WxSc.flag = false;\\n" +
            "        return;\\n      } else { break; }\\n    }\\n  }\\n  WxSc.Util.UseSkill(WxSc." +
            "flag ? WxSc.悲欢离合 : WxSc.阴晴圆缺);\\n  WxSc.flag = !WxSc.flag;\\n};\\n\\nWxSc.OnChangePe" +
            "t = () => {};\\nWxSc.OnFightOver = () => {};\",\r\n  \"pve-压血\": \"if (WxSc.Util.GetBag" +
            "1().length > 0) {\\n  WxSc.OnFirstRound = () => { WxSc.Util.UseSkill(0); }\\n  WxS" +
            "c.OnUseSkill = async (mySkillInfo) => {\\n    await WxSc.Util.DelayAsync(WxSc.Con" +
            "st.DelayMs);\\n    if (mySkillInfo.remainHP != 0) {\\n      WxSc.Util.UseSkill(0);" +
            "\\n    }\\n    else {\\n      WxSc.Util.ChangePetByID([]);\\n    }\\n  }\\n  WxSc.OnCh" +
            "angePet = () => { WxSc.Util.UseSkill(0); }\\n  WxSc.OnFightOver = () => {\\n    Wx" +
            "Sc.Util.StopAutoFight();\\n    WxSc.Util.CurePet20HP();\\n  }\\n\\n  WxSc.Util.SetIs" +
            "AutoCure(false);\\n  WxSc.Util.LowHP();\\n}\\nelse {\\n  alert(\'没有出战精灵\');\\n}\",\r\n  \"p" +
            "ve-套装-漆黑-假面-吉光\": \"WxSc.Util.ChangeCloth([1301043,0,1301044,0,1301045,0,1301046,0" +
            ",1300954,0]);\\nWxSc.Util.SetTitle(272);\",\r\n  \"pve-套装-耀世-魔界-神话\": \"WxSc.Util.Chang" +
            "eCloth([1300950,0,1300951,0,1300952,0,1300953,0,1300874,0]);\\nWxSc.Util.SetTitle" +
            "(300);\",\r\n  \"pve-套装-银翼-假面-吉光\": \"WxSc.Util.ChangeCloth([1300670,0,1300671,0,13006" +
            "72,0,1300673,0,1300954,0]);\\nWxSc.Util.SetTitle(272);\",\r\n  \"pve-状态-因子1-保存\": \"WxS" +
            "c.Util.StateSave(\'因子1\')\",\r\n  \"pve-状态-因子1-更换\": \"WxSc.Util.StateLoadAsync(\'因子1\')\"," +
            "\r\n  \"pve-状态-因子2-保存\": \"WxSc.Util.StateSave(\'因子2\')\",\r\n  \"pve-状态-因子2-更换\": \"WxSc.Uti" +
            "l.StateLoadAsync(\'因子2\')\",\r\n  \"pve-状态-因子3-保存\": \"WxSc.Util.StateSave(\'因子3\')\",\r\n  \"" +
            "pve-状态-因子3-更换\": \"WxSc.Util.StateLoadAsync(\'因子3\')\",\r\n  \"pve-状态-因子4-保存\": \"WxSc.Uti" +
            "l.StateSave(\'因子4\')\",\r\n  \"pve-状态-因子4-更换\": \"WxSc.Util.StateLoadAsync(\'因子4\')\",\r\n  \"" +
            "pve-状态-因子5-保存\": \"WxSc.Util.StateSave(\'因子5\')\",\r\n  \"pve-状态-因子5-更换\": \"WxSc.Util.Sta" +
            "teLoadAsync(\'因子5\')\",\r\n  \"pve-绿火\": \"(async () => {\\n  let FIRE_BLUE_SMALL = 2;\\n " +
            " let FIRE_PURPLE_SMALL = 3;\\n  let FIRE_GOLD_SMALL = 4;\\n  let FIRE_GREEN_SMALL " +
            "= 5;\\n  let FIRE_GREEN_BIG = 6;\\n  let FIRE_BLUE_BIG = 7;\\n  let FIRE_PURPLE_BIG" +
            " = 8;\\n  let FIRE_GOLD_BIG = 9;\\n  if (await WxSc.Util.CopyFireAsync([FIRE_GREEN" +
            "_SMALL])) {\\n    setTimeout(() => {\\n      WxSc.Util.SimpleAlarm(\'火焰好像快失效了\');\\n " +
            "   }, 10 * 60 * 1000);\\n  }\\n})();\",\r\n  \"pve-金火\": \"(async () => {\\n    let FIRE_" +
            "BLUE_SMALL = 2;\\n    let FIRE_PURPLE_SMALL = 3;\\n    let FIRE_GOLD_SMALL = 4;\\n " +
            "   let FIRE_GREEN_SMALL = 5;\\n    let FIRE_GREEN_BIG = 6;\\n    let FIRE_BLUE_BIG" +
            " = 7;\\n    let FIRE_PURPLE_BIG = 8;\\n    let FIRE_GOLD_BIG = 9;\\n    await WxSc." +
            "Util.CopyFireAsync([FIRE_GOLD_BIG,FIRE_GOLD_SMALL]);\\n  })();\",\r\n  \"关卡-噬梦魔灵-第二关\"" +
            ": \"// 打开开发者工具，在 console 页面查看指引\\n// 制作过程视频：BV1fm8nexENV\\n(async () => {\\n  functi" +
            "on ReadInt(data) { return (data.byteArray[data.position++] << 24) + (data.byteAr" +
            "ray[data.position++] << 16) + (data.byteArray[data.position++] << 8) + data.byte" +
            "Array[data.position++]; }\\n  function ReadByte(data) { return data.byteArray[dat" +
            "a.position++]; }\\n\\n  async function getMultiValue(arr) {\\n    arr.unshift(arr.l" +
            "ength); // 赛发送数组的特殊格式，首位是数组长度\\n    let data = {};\\n    data.byteArray = await Wx" +
            "Sc.Util.SendAsync(46046, arr);\\n    data.position = 0;\\n    // 将收到的包解析成数组\\n    l" +
            "et result = [];\\n    let arrayLength = ReadInt(data);\\n    for (let i = 0; i < a" +
            "rrayLength; ++i) { result.push(ReadInt(data)); }\\n    return result;\\n  }\\n\\n  f" +
            "unction getBit(p1, p2) { return (p1 >> (p2 - 1)) & 1; }\\n  function getByte(p1, " +
            "p2) { return (p1 >> (8 * p2)) & 255; }\\n\\n  async function getMapInfo(curMap) {\\" +
            "n    let mapObj = {};\\n\\n    let arr = await getMultiValue([\\n      103296 + (cu" +
            "rMap - 1) / 4,\\n      103309 + curMap - 1,\\n      103360 + (curMap - 1) / 32\\n  " +
            "  ]);\\n    arr[0] = getByte(arr[0], (curMap - 1) % 4);\\n    if (arr[0] < 5) {\\n " +
            "     // 一共 4 种颜色的球，arr[0] 分别为 1 2 3 4 时，表示地图上有对应的球\\n      if (arr[0] > 0) {\\n   " +
            "     mapObj.ballType = arr[0];\\n      }\\n    }\\n    else if (arr[0] < 9) {\\n    " +
            "  // 地图上有井，种类为 (arr[0] - 5)\\n      // 数值从 0 开始，与球的标号不同，但是按照顺序，颜色还是对应得上的\\n      m" +
            "apObj.holeType = arr[0] - 5;\\n    }\\n    else {\\n      // 地图上有 NPC\\n    }\\n\\n   " +
            " // 每张地图都有 4 个门\\n    // doors 数组中，从左到右依次对应界面上显示的门\\n    // 0 表示此路不通\\n    // 其他数字，" +
            "在不同的地图中相同数字的门，表示互相连通\\n    mapObj.doors = [];\\n    for (let i = 1; i <= 4; ++i) {" +
            "\\n      mapObj.doors[i - 1] = getByte(arr[1], i - 1);\\n    }\\n\\n    return mapOb" +
            "j;\\n  }\\n\\n  async function findPath() {\\n    if (window.allMapInfo11813 === und" +
            "efined) {\\n      window.allMapInfo11813 = [];\\n      for (let i = 1; i < 21; ++i" +
            ") { window.allMapInfo11813.push(await getMapInfo(i)); }\\n      console.log(\'世界地图" +
            "\', window.allMapInfo11813);\\n    }\\n\\n    // 当前地图\\n    let globalObj = {};\\n    " +
            "let arr = await getMultiValue([103294, 103295]);\\n    globalObj.curMap = arr[0] " +
            "& 255; // 地图标号（一共 20 张地图，标号从 1 开始）\\n    globalObj.curEnergy = arr[0] >> 8 & 255;" +
            " // 灵魂能量\\n    globalObj.curHasBall = arr[0] >> 16 & 255;\\n    globalObj.hasTrans" +
            "ferNum = arr[0] >> 24 & 255; // 已走过的步数\\n\\n    globalObj.hasBall = []\\n    for (l" +
            "et i = 1; i <= 4; ++i) {\\n      if (getBit(arr[1], i) == 1) {\\n        globalObj" +
            ".hasBall[i - 1] = 1;\\n      }\\n      else {\\n        globalObj.hasBall[i - 1] = " +
            "0;\\n      }\\n    }\\n\\n    globalObj.doors = window.allMapInfo11813[globalObj.cur" +
            "Map - 1].doors;\\n\\n    // console.log(globalObj);\\n    console.log(`当前地图上，门的编号（从" +
            "左到右）分别是：[${globalObj.doors.filter(door => door!=0).join(\' \')}]`);\\n    if (globa" +
            "lObj.curHasBall === 0) {\\n      console.log(\'寻找最近的球\');\\n      let path = bfs(glo" +
            "balObj.curMap, m => (\'ballType\' in m && globalObj.hasBall[m.ballType-1] === 0));" +
            "\\n      if (path.length === 0) {\\n        console.log(\'请捡起当前地图上的球\');\\n      }\\n " +
            "     else if (path.length > window.allMapInfo11813.length) {\\n        console.lo" +
            "g(\'剩下的球无法获取，请先耗尽灵魂能量，重置关卡\');\\n      }\\n      else {\\n        console.log(`请进入 ${" +
            "path[0]} 号门`);\\n      }\\n    }\\n    else {\\n      console.log(\'寻找井\');\\n      let" +
            " path = bfs(globalObj.curMap, m => (\'holeType\' in m && m.holeType === globalObj." +
            "curHasBall-1));\\n      if (path.length === 0) {\\n        console.log(\'请将球投入当前地图上" +
            "的井\');\\n      }\\n      else if (path.length > window.allMapInfo11813.length) {\\n " +
            "       console.log(\'剩下的井所在位置无法到达，请先耗尽灵魂能量，重置关卡\');\\n      }\\n      else {\\n      " +
            "  console.log(`请进入 ${path[0]} 号门`);\\n      }\\n    }\\n  }\\n\\n  function bfs(curMa" +
            "p, predicate) {\\n    let visited = (new Array(window.allMapInfo11813.length)).fi" +
            "ll(null); // 记录路径\\n    let queue = [];\\n    queue.push(curMap-1);\\n    visited[c" +
            "urMap-1] = [];\\n\\n    while (queue.length > 0) {\\n      let cur = queue.shift();" +
            "\\n      if (predicate(window.allMapInfo11813[cur])) {\\n        return visited[cu" +
            "r];\\n      }\\n      for (let door of window.allMapInfo11813[cur].doors) {\\n     " +
            "   if (door === 0) continue;\\n        // 若两个地图有相同编号的门，则说明这两个地图相互连通\\n        for " +
            "(let i = 0; i < window.allMapInfo11813.length; ++i) {\\n          if (i === cur |" +
            "| visited[i] != null) continue;\\n          if (window.allMapInfo11813[i].doors.i" +
            "ndexOf(door) != -1) {\\n            queue.push(i);\\n            visited[i] = visi" +
            "ted[cur].concat([door]);\\n          }\\n        }\\n      }\\n    }\\n    return new" +
            " Array(window.allMapInfo11813.length+1);\\n  }\\n\\n  console.log(\'=====\');\\n  awai" +
            "t findPath();\\n})();\",\r\n  \"关卡-暗黑托鲁克\": \"// 需要有精灵：3437 艾欧丽娅（携带技能疾击之刺、第五技能侍君奉此生）\\n(" +
            "async () => {\\n  function ReadInt(data) { return (data.byteArray[data.position++" +
            "] << 24) + (data.byteArray[data.position++] << 16) + (data.byteArray[data.positi" +
            "on++] << 8) + data.byteArray[data.position++]; }\\n  function ReadByte(data) { re" +
            "turn data.byteArray[data.position++]; }\\n\\n  async function getMultiValue(arr) {" +
            "\\n    arr.unshift(arr.length); // 赛发送数组的特殊格式，首位是数组长度\\n    let data = {};\\n    da" +
            "ta.byteArray = await WxSc.Util.SendAsync(46046, arr);\\n    data.position = 0;\\n " +
            "   // 将收到的包解析成数组\\n    let result = [];\\n    let arrayLength = ReadInt(data);\\n  " +
            "  for (let i = 0; i < arrayLength; ++i) { result.push(ReadInt(data)); }\\n    ret" +
            "urn result;\\n  }\\n\\n  async function updateItems(arr) {\\n    arr.unshift(arr.len" +
            "gth);\\n    let data = {};\\n    data.byteArray = await WxSc.Util.SendAsync(42399," +
            " arr); // MULTI_ITEM_LIST\\n    data.position = 0;\\n    let result = [];\\n    let" +
            " arrayLength = ReadInt(data);\\n    for (let i = 0; i < arrayLength; ++i) {\\n    " +
            "  let item = {};\\n      item.itemID = ReadInt(data);\\n      item.itemNum = ReadI" +
            "nt(data);\\n      item.leftTime = ReadInt(data);\\n      item._itemLevel = ReadInt" +
            "(data);\\n      item.updateTime = ReadInt(data);\\n      result.push(item);\\n    }" +
            "\\n    return result;\\n  }\\n\\n  const 艾欧丽娅 = 3437;\\n  const 疾击之刺 = 31114;\\n  cons" +
            "t 侍君奉此生 = 31117;\\n  let bag1 = WxSc.Util.GetBag1();\\n  let bag2 = WxSc.Util.GetB" +
            "ag2();\\n  let pets = await WxSc.Util.GetStoragePetsAsync();\\n  pets = pets.filte" +
            "r(pet => pet.id===艾欧丽娅);\\n  if (pets.length===0) {\\n    // 再看看背包里有没有\\n    pets =" +
            " bag1.concat(bag2).filter(pet => pet.id===艾欧丽娅);\\n    if (pets.length===0) {\\n  " +
            "    alert(\'未找到艾欧丽娅，任务终止\');\\n      return;\\n    }\\n  }\\n  await WxSc.Util.SetPetB" +
            "agAsync([pets[0].catchTime]);\\n  let petInfo = WxSc.Util.GetBagPetInfos()[0];\\n " +
            " if (petInfo.skillArray.filter(sk => sk.id===疾击之刺).length===0) {\\n    alert(\'【艾欧" +
            "丽娅】没有搭配技能【疾击之刺】，任务终止\');\\n    return;\\n  }\\n  if (petInfo.hideSKill.id!==侍君奉此生) {" +
            "\\n    alert(\'【艾欧丽娅】没有搭配技能【侍君奉此生】，任务终止\');\\n    return;\\n  }\\n\\n  WxSc.Util.Simple" +
            "Alarm(\'崩塌吧！天空之城！\');\\n  WxSc.Util.SetIsHidePetFight(true);\\n\\n  // 发起战斗\\n  let fi" +
            "ghtWithTlk = (region) => {\\n    return new Promise(res => {\\n      WxSc.OnFightO" +
            "ver = (overInfo) => {\\n        res (overInfo.winnerID != 0);\\n      }\\n      WxS" +
            "c.Util.Send(41129, region);\\n    });\\n  }\\n\\n  while (true) {\\n    // 剩余挑战次数\\n  " +
            "  let arr = await getMultiValue([12045,2065]);\\n    if (3 - arr[0] + arr[1] === " +
            "0) break;\\n    // console.log(\'新一轮挑战\');\\n    for (let i = 0; i < 6; ++i) {\\n    " +
            "  let data = {};\\n      data.byteArray = await WxSc.Util.SendAsync(47087, []); /" +
            "/ SKY_CITY_GET_BOSS_REGION\\n      data.position = 0;\\n      let region = ReadInt" +
            "(data);\\n      if (region === 251) {\\n        // 真身\\n        // 出招\\n        WxSc" +
            ".OnFirstRound = () => WxSc.Util.UseSkill(侍君奉此生);\\n        WxSc.OnUseSkill = asyn" +
            "c (mySkillInfo) => {\\n          await WxSc.Util.DelayAsync(200);\\n          WxSc" +
            ".Util.UseSkill(侍君奉此生);\\n        }\\n        let isWin = await fightWithTlk(region" +
            ");\\n        // console.log(`对战真身，${isWin?\'胜利\':\'失败\'}`);\\n        // 失败后的情况有点奇怪，没看" +
            "明白，就不处理了\\n        await WxSc.Util.DelayAsync(5000);\\n        break;\\n      }\\n  " +
            "    else {\\n        // 出招\\n        WxSc.OnFirstRound = () => WxSc.Util.UseSkill(" +
            "疾击之刺);\\n        WxSc.OnUseSkill = async (mySkillInfo) => {\\n          await WxSc" +
            ".Util.DelayAsync(200);\\n          WxSc.Util.UseSkill(疾击之刺);\\n        }\\n        " +
            "let isWin = await fightWithTlk(region);\\n        // console.log(`对战分身，${isWin?\'胜" +
            "利\':\'失败\'}`);\\n        await WxSc.Util.DelayAsync(5000);\\n      }\\n    }\\n  }\\n\\n " +
            " let items = await updateItems([1700364,1700365]);\\n  if (items[1].itemNum<100 &" +
            "& items[0].itemNum>150) {\\n    // 合成\\n    while (items[0].itemNum >= 150) {\\n   " +
            "   WxSc.Util.Send(2901, 1768);\\n      items[0].itemNum -= 50;\\n      ++items[1]." +
            "itemNum;\\n    }\\n  }\\n  WxSc.Util.StopAutoFight();\\n  WxSc.Util.SetIsHidePetFigh" +
            "t(false);\\n  // 恢复背包\\n  await WxSc.Util.SetPetBagAsync(bag1.map(pet => pet.catch" +
            "Time),bag2.map(pet => pet.catchTime));\\n  if (items[0].itemNum>=100 && items[1]." +
            "itemNum>=100) {\\n    alert(\'可以去地图965领取精灵了\');\\n  }\\n  else {\\n    alert(`当前进度：${i" +
            "tems[0].itemNum}/100 | ${items[1].itemNum}/100`);\\n  }\\n})();\\n// 参考资料：\\n// http" +
            "s://seer.61.com/module/com/robot/module/app/BlackBulukeMainPanel.swf\\n// https:/" +
            "/seer.61.com/dll/RobotAppDLL.swf\\n// https://seer.61.com/dll/PetFightDLL_201308." +
            "swf\\n// com.robot.app.task.control.TianKongZhiChengController\\n// com.robot.app2" +
            ".control.BlackTuolukeGame\",\r\n  \"日常-通行证-养成任务\": \"(async () => {\\n  let bag1 = WxSc" +
            ".Util.GetBag1();\\n  let bag2 = WxSc.Util.GetBag2();\\n  let pets = await WxSc.Uti" +
            "l.GetStoragePetsAsync();\\n  // 从仓库取出一只 皮皮\\n  pets = pets.filter(pet => pet.id===" +
            "10);\\n  if (pets.length === 0) {\\n    pets = bag1.concat(bag2).filter(pet => pet" +
            ".id===10);\\n    if (pets.length === 0) WxSc.Util.SimpleAlarm(\'没有精灵皮皮，任务失败\');\\n  " +
            "}\\n  let ct = pets[0].catchTime;\\n  await WxSc.Util.SetPetBagAsync([ct]);\\n  // " +
            "性格\\n  WxSc.Util.Send(2326,ct,300070);\\n  // 恢复背包\\n  await WxSc.Util.SetPetBagAsy" +
            "nc(bag1.map(pet => pet.catchTime),bag2.map(pet => pet.catchTime));\\n  // 领奖\\n  W" +
            "xSc.Util.Send(41916,1,3);\\n  WxSc.Util.SimpleAlarm(\'ok\');\\n})();\",\r\n  \"活动-精灵鉴定\":" +
            " \"WxSc.Util.ShowAppModule(\'AssessorPanel\'); // https://seer.61.com/module/com/ro" +
            "bot/module/app/AssessorPanel.swf\",\r\n  \"状态-pvp-保存\": \"WxSc.Util.StateSave(\'pvp\')\"," +
            "\r\n  \"状态-pvp-更换\": \"WxSc.Util.StateLoadAsync(\'pvp\')\",\r\n  \"状态-日常-保存\": \"WxSc.Util.St" +
            "ateSave(\'日常\')\",\r\n  \"状态-日常-更换\": \"WxSc.Util.StateLoadAsync(\'日常\')\",\r\n  \"野生精灵\": \"WxS" +
            "c.OnFirstRound = () => {\\n  // 对战首回合，使用特殊胶囊捕捉\\n  WxSc.Util.Send(2409,300505);\\n " +
            " WxSc.Util.ItemBuy(300505);\\n  alert(\'捕捉成功\');\\n}\\n(() => {\\n  const 闪光皮皮 = 164, " +
            "keyFunc = \'catch\', keyResult = \'catchRes\', SocketConnection = \'com.robot.core.ne" +
            "t.SocketConnection\', MAP_OGRE_LIST = 2004;\\n  try {\\n    WxSc.Refl.Func(SocketCo" +
            "nnection,\'removeCmdListener\',false,MAP_OGRE_LIST,true,keyFunc); // 防止重复\\n  } cat" +
            "ch (e) {}\\n  WxSc.Dict.AddCall(keyFunc,keyResult,() => {\\n    // 接收到的参数会存放到 keyR" +
            "esult 数组中，这里需要的是第一个参数（下标为 0），类型为 SocketEvent\\n    for (let i = 0; i < 9; i++) {\\" +
            "n      WxSc.Dict.Set(keyResult,\'0.data.position\',false,0);\\n      let o = WxSc.D" +
            "ict.Func(keyResult,\'0.data.readUnsignedInt\');\\n      if (o === 闪光皮皮) {\\n        " +
            "WxSc.Refl.Func(\'com.robot.app.fight.FightManager\',\'fightWithNpc\',false,闪光皮皮);\\n " +
            "       return;\\n      }\\n    }\\n    WxSc.Util.SimpleAlarm(\'等待\');\\n  });\\n  WxSc." +
            "Refl.Func(SocketConnection,\'addCmdListener\',false,MAP_OGRE_LIST,true,keyFunc);\\n" +
            "})()\\nWxSc.Util.ChangeMap(10); // 克洛斯星\"\r\n}")]
        public string FlashFightTemplate {
            get {
                return ((string)(this["FlashFightTemplate"]));
            }
            set {
                this["FlashFightTemplate"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("{\r\n  \"换色\": \"NonoColorChangePanel\",\r\n  \"炫光\": \"AssessorPanel\"\r\n}")]
        public string ActivityCollection {
            get {
                return ((string)(this["ActivityCollection"]));
            }
            set {
                this["ActivityCollection"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool AutoLoadActivities {
            get {
                return ((bool)(this["AutoLoadActivities"]));
            }
            set {
                this["AutoLoadActivities"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool AutoLoadFightHandler {
            get {
                return ((bool)(this["AutoLoadFightHandler"]));
            }
            set {
                this["AutoLoadFightHandler"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool AutoLoadScreenShot {
            get {
                return ((bool)(this["AutoLoadScreenShot"]));
            }
            set {
                this["AutoLoadScreenShot"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool AutoLoadFlashMap {
            get {
                return ((bool)(this["AutoLoadFlashMap"]));
            }
            set {
                this["AutoLoadFlashMap"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("{}")]
        public string SpecificPetSkins {
            get {
                return ((string)(this["SpecificPetSkins"]));
            }
            set {
                this["SpecificPetSkins"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("")]
        public string FiddleObjects {
            get {
                return ((string)(this["FiddleObjects"]));
            }
            set {
                this["FiddleObjects"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool AutoLoadFD {
            get {
                return ((bool)(this["AutoLoadFD"]));
            }
            set {
                this["AutoLoadFD"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("https://seer.61.com/play.shtml")]
        public string DefaultURL {
            get {
                return ((string)(this["DefaultURL"]));
            }
            set {
                this["DefaultURL"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("1")]
        public int FavouriteMap {
            get {
                return ((int)(this["FavouriteMap"]));
            }
            set {
                this["FavouriteMap"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        public bool IsHideBattleStrategy {
            get {
                return ((bool)(this["IsHideBattleStrategy"]));
            }
            set {
                this["IsHideBattleStrategy"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        public bool AutoMute {
            get {
                return ((bool)(this["AutoMute"]));
            }
            set {
                this["AutoMute"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        public bool IsLoadFormSpeedhack {
            get {
                return ((bool)(this["IsLoadFormSpeedhack"]));
            }
            set {
                this["IsLoadFormSpeedhack"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("")]
        public string PetFollow {
            get {
                return ((string)(this["PetFollow"]));
            }
            set {
                this["PetFollow"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("")]
        public string Suits {
            get {
                return ((string)(this["Suits"]));
            }
            set {
                this["Suits"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("")]
        public string Mount {
            get {
                return ((string)(this["Mount"]));
            }
            set {
                this["Mount"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool ScaleKeep {
            get {
                return ((bool)(this["ScaleKeep"]));
            }
            set {
                this["ScaleKeep"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("240")]
        public string PosX {
            get {
                return ((string)(this["PosX"]));
            }
            set {
                this["PosX"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("240")]
        public string PosY {
            get {
                return ((string)(this["PosY"]));
            }
            set {
                this["PosY"] = value;
            }
        }
    }
}
