//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace SeerRandomSkin.Properties {
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "17.13.0.0")]
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("1,4,8,29,50,104,164,165,166,171,172,174,181,183,192,193,195,224,227,278,306,309,3" +
            "47,353,438,439,447,454,455,468,469,470,490,498,501,503,508,510,511,515,518,526,5" +
            "30,531,532,544,569,570,584,590,601,603,612,613,614,643,661,695,697,698,729,760,7" +
            "80,781,782,783,784,796,798,799,804,810,811,678,820,821,834,864,504,505,875,880,8" +
            "81,886,682,683,905,908,923,927,928,945,950,957,960,961,962,965,974,977,987,998,9" +
            "99,1000,1003,1011,1012,1017,1018,1019,1020,1029,1045,1061,1086,1087,1093,1109,11" +
            "11,1115,1121,1122,1155,1156,1165,1166,1167,1168,1177,1179,1187,1189,1201,1202,12" +
            "04,1215,1256,1260,1287,1288,1290,1306,1327,1336,1355,1394,1412,1446,1447,1449,14" +
            "56,1526,1527,1533,1534,1537,1567,1568,1569,1580,1587,1588,1630,1631,1632,1648,16" +
            "51,1656,1657,1669,1678,1679,1680,1681,1665,1700,1715,1717,1730,1745,1746,1748,17" +
            "56,1776,1777,1802,1806,1809,1815,1819,1825,1836,1840,1851,1864,1861,1910,1944,19" +
            "45,1951,1955,1956,1960,1971,1972,2000,2001,2006,2034,2045,2048,2049,2054,2073,20" +
            "74,2085,2147,2149,2156,2165,2167,2168,2172,2173,2174,2175,2178,2186,2197,2206,22" +
            "18,2219,2234,2242,2247,2250,2257,2262,2283,2288,2310,2321,2325,2326,2327,2329,23" +
            "33,2347,2349,2358,2363,2375,2376,2377,2387,2394,2400,2402,2407,2413,2429,2430,24" +
            "37,2438,2441,2442,2447,2462,2468,2469,2471,2488,2500,2502,2503,2508,2516,2519,25" +
            "20,2521,2533,2535,2545,2580,2591,2606,2607,2612,2613,2619,2620,2625,2634,2635,26" +
            "36,2643,2648,2652,2655,2661,2662,2665,2673,2676,2678,2679,2681,2684,2691,2703,27" +
            "08,2710,2733,2736,2744,2748,2761,2769,2780,2786,2787,2793,2794,2796,2800,2811,28" +
            "13,2821,2824,2825,2829,2835,2837,2839,2840,2842,2843,2849,2850,2852,2853,2858,28" +
            "59,2861,2862,2873,2875,2879,2883,2887,2888,2893,2906,2915,2918,2925,2935,2937,29" +
            "51,2953,2955,2967,2972,2982,2988,2991,3001,3003,3017,3038,3042,3043,3044,3050,30" +
            "57,3066,3074,3075,3081,3082,3087,3092,3094,3097,3102,3103,3104,3105,3110,3111,31" +
            "12,3113,3117,3118,3122,3128,3129,3134,3137,3140,3141,3146,3147,3150,3156,3163,31" +
            "64,3168,3171,3179,3190,3192,3193,3194,3196,3204,3205,3210,3214,3216,3222,3224,32" +
            "27,3228,3229,3232,3233,3234,3237,3239,3240,3243,3249,3256,3261,3267,3269,3272,32" +
            "73,3289,3290,3293,3294,3295,3296,3302,3303,3304,3305,3307,3308,3309,3311,3312,33" +
            "15,3318,3320,3321,3322,3324,3325,3326,3327,3328,3333,3336,3340,3343,3346,3353,33" +
            "54,3355,3356,3357,3358,3373,3374,3375,3378,3380,3382,3383,3388,3392,3395,3397,34" +
            "02,3403,3404,3414,3418,3421,3425,3430,3435,3436,3437,3439,3440,3443,3446,3455,34" +
            "56,3458,3461,3463,3465,3478,3479,3481,3486,3487,3488,3490,3491,3502,3503,3504,35" +
            "06,3510,3511,3516,3525,3532,3535,3539,3545,3547,3552,3554,3567,3568,3569,3570,35" +
            "71,3575,3577,3578,3580,3590,3612,3615,3623,3625,3626,3627,3631,3642,3643,3644,36" +
            "45,3649,3655,3663,3664,3665,3667,3668,3669,3676,3679,3683,3685,3691,3693,3694,37" +
            "01,3703,3704,3711,3717,3724,3737,3740,3741,3742,3743,3748,3753,3758,3774,3776,37" +
            "78,3780,3783,3786,3790,3792,3797,3803,3807,3808,3810,3813,3816,3820,3830,3833,38" +
            "41,3842,3845,3857,3858,3861,3864,3866,3867,3873,3875,3878,3879,3883,3888,3889,38" +
            "91,3892,3897,3898,3899,3914,3919,3920,3926,3928,3929,3937,3939,3940,3941,3945,39" +
            "49,3957,3959,3961,3964,3965,3983,3986,3987,3992,3995,3998,4004,4005,4007,4009,40" +
            "15,4017,4018,4022,4024,4027,4028,4032,4035,4037,4038,4041,4042,4046,4052,4054,40" +
            "55,4057,4061,4064,4065,4068,4074,4081,4086,4088,4093,4097,4101,4106,4107,4109,41" +
            "10,4113,4114,4115,4123,4124,4125,4131,4132,4135,4139,4143,4146,4147,4151,4154,41" +
            "56,4159,4160,4163,4165,4166,4173,4174,4177,4179,4182,4184,4186,4187,4188,4189,41" +
            "93,4209,4212,4215,4219,4221,4222,4231,4233,4237,4240,4241,4242,4246,4247,4249,42" +
            "50,4251,4252,4253,4254,4261,4262,4268,4272,4273,4275,4277,4280,4284,4286,4287,42" +
            "88,4289,4290,4291,4295,4300,4301,4302,4303,4304,4305,4306,4307,4309,4310,4313,43" +
            "18,4319,4321,4322,4324,4325,4327,4328,4329,4330,4331,4333,4334,4338,4340,4342,43" +
            "45,4347,4352,4353,4356,4358,4360,4364,4365,4372,4373,4374,4385,4389,4390,4391,43" +
            "92,4397,4401,4402,4407,4408,4410,4412,4413,4417,4420,4421,4423,4424,4426,4429,44" +
            "36,4438,4440,4441,4442,4446,4448,4449,4451,4455,4456,4458,4459,4461,4462,4465,44" +
            "66,4467,4469,4472,4477,4480,4481,4482,4483,4484,4488,4490,4491,4492,4496,4498,44" +
            "99,4500,4502,4504,4505,4509,4510,4511,4514,4516,4518,4519,4522,4524,4526,4527,45" +
            "29,4530,4531,4534,4535,4538,4539,4546,4547,4548,4551,4552,4553,4554,4555,4557,45" +
            "59,4560,4562,4566,4567,4569,4572,4573,4574,4577,4582,4584,4585,4587,4588,4589,45" +
            "91,4593,4594,4595,4597,4598,4600,4604,4605,4606,4609,4612,4613,4617,4619,4620,46" +
            "22,4623,4625,4627,4628,4630,4634,4635,4636,4642,4643,4644,4646,4648,4649,4650,46" +
            "51,4652,4653,4654,4655,4656,4658,4661,4662,4663,4667,4669,4671,4672,4674,4676,46" +
            "77,4678,4679,4680,4681,4683,4684,4685,4686,4687,4688,4689,4691,4706,4693,4694,46" +
            "95,4696,4697,4698,4699,4700,4702,4703,5002,5005,5006,5008,5009,5010,5011,5013,50" +
            "14,5015,5016,5017,5018,5019,5021,5024,5025,5027,5030,5031,5032,5033,5036,5039,50" +
            "42,5044,5045,5046,5047,5052,5053,5055,5056,5057,5058,5059,5060,5061,5062,5063,50" +
            "64,5069,5071,5072,5073,5074,5075,5111,5357,5403,5404,5494,5498,5503,5509,5601,56" +
            "05,5606,5607,5608,5693,5713,5772,5773,5774,5776,5785,5786,5787,5788,5789,5790,57" +
            "96,5797,5819,5820,5821,5824,1400126,1400130,1400132,1400138,1400139,1400141,1400" +
            "142,1400143,1400148,1400149,1400150,1400153,1400155,1400158,1400159,1400160,1400" +
            "161,1400165,1400166,1400168,1400170,1400174,1400176,1400178,1400179,1400182,1400" +
            "183,1400185,1400187,1400189,1400190,1400193,1400194,1400195,1400204,1400213,1400" +
            "220,1400224,1400225,1400231,1400233,1400241,1400242,1400246,1400247,1400249,1400" +
            "250,1400252,1400253,1400261,1400262,1400268,1400269,1400280,1400281,1400283,1400" +
            "284,1400286,1400287,1400288,1400294,1400295,1400297,1400299,1400301,1400302,1400" +
            "304,1400305,1400306,1400307,1400308,1400309,1400311,1400313,1400314,1400315,1400" +
            "317,1400318,1400321,1400322,1400325,1400327,1400328,1400329,1400330,1400332,1400" +
            "333,1400334,1400335,1400336,1400340,1400342,1400344,1400345,1400346,1400347,1400" +
            "348,1400351,1400352,1400354,1400356,1400359,1400360,1400365,1400367,1400369,1400" +
            "371,1400372,1400374,1400375,1400377,1400378,1400379,1400380,1400382,1400383,1400" +
            "384,1400385,1400386,1400387,1400392,1400394,1400395,1400396,1400398,1400404,1400" +
            "409,1400410,1400411,1400412,1400413,1400414,1400415,1400416,1400417,1400419,1400" +
            "420,1400421,1400422,1400427,1400430,1400431,1400433,1400434,1400436,1400437,1400" +
            "438,1400440,1400442,1400445,1400446,1400447,1400448,1400450,1400454,1400455,1400" +
            "457,1400460,1400464,1400465,1400467,1400468,1400469,1400470,1400471,1400472,1400" +
            "473,1400474,1400475,1400478,1400479,1400480,1400481,1400482,1400486,1400487,1400" +
            "489,1400490,1400491,1400492,1400493,1400495,1400496,1400497,1400501,1400502,1400" +
            "507,1400508,1400510,1400511,1400514,1400516,1400517,1400519,1400520,1400522,1400" +
            "523,1400525,1400527,1400530,1400531,1400532,1400534,1400535,1400536,1400540,1400" +
            "541,1400542,1400543,1400544,1400546,1400547,1400548,1400549,1400552,1400553,1400" +
            "555,1400556,1400559,1400560,1400561,1400563,1400564,1400565,1400566,1400567,1400" +
            "568,1400569,1400570,1400571,1400572,1400575,1400576,1400578,1400579,1400580,1400" +
            "582,1400583,1400584,1400587,1400588,1400589,1400592,1400594,1400595,1400596,1400" +
            "599,1400601,1400604,1400605,1400606,1400607,1400608,1400611,1400613,1400616,1400" +
            "619,1400620,1400621,1400622,1400623,1400634,1400635,1400636,1400639,1400640,1400" +
            "641,1400642,1400644,1400646,1400650,1400652,1400653,1400654,1400658,1400659,1400" +
            "660,1400661,1400662,1400664,1400665,1400666,1400667,1400669,1400670,1400671,1400" +
            "674,1400675,1400677,1400678,")]
        public string SkinIds {
            get {
                return ((string)(this["SkinIds"]));
            }
            set {
                this["SkinIds"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        public bool IsRandomSkin {
            get {
                return ((bool)(this["IsRandomSkin"]));
            }
            set {
                this["IsRandomSkin"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("5001,5003,5004,5022,5028,5029,5034,5066,5067,5068,5076,5077,5078,5079,5080,5081,5" +
            "082,5083,5084,5085,5086,5087,5088,5089,5090,5091,5092,5093,5094,5095,5096,5097,5" +
            "098,5099,5100,5101,5102,5103,5104,5105,5106,5107,5108,5109,5110,5129,5144,5145,5" +
            "146,5147,5153,5154,5155,5156,5165,5166,5167,5168,5169,5170,5171,5172,5173,5174,5" +
            "175,5176,5177,5178,5179,5180,5181,5182,5183,5184,5185,5186,5187,5188,5189,5190,5" +
            "191,5192,5193,5194,5195,5196,5197,5198,5199,5201,5202,5203,5204,5205,5206,5207,5" +
            "208,5209,5210,5211,5212,5213,5214,5215,5216,5217,5218,5219,5220,5221,5222,5223,5" +
            "224,5225,5226,5227,5228,5229,5230,5231,5232,5239,5240,5241,5242,5243,5244,5245,5" +
            "246,5247,5248,5249,5250,5251,5252,5253,5254,5255,5256,5257,5258,5259,5260,5261,5" +
            "262,5263,5264,5265,5266,5267,5268,5269,5270,5271,5272,5273,5274,5275,5276,5277,5" +
            "278,5279,5280,5281,5282,5283,5284,5285,5286,5287,5288,5289,5290,5318,5319,5320,5" +
            "321,5322,5323,5324,5325,5326,5327,5328,5329,5330,5331,5332,5333,5334,5335,5336,5" +
            "337,5338,5339,5340,5341,5342,5343,5358,5359,5360,5361,5362,5363,5364,5365,5366,5" +
            "367,5368,5369,5370,5371,5372,5373,5374,5375,5376,5377,5378,5379,5380,5381,5382,5" +
            "383,5384,5385,5386,5387,5388,5389,5390,5391,5392,5393,5394,5395,5396,5397,5398,5" +
            "399,5400,5401,5402,5418,5434,5437,5432,5441,5465,5466,5479,5478,5477,5480,5481,5" +
            "482,5483,5484,5485,5486,5487,5488,5489,5510,5512,5517,5529,5530,5531,5532,5566,5" +
            "568,5569,5567,5570,5571,5572,5573,5574,5575,5576,5577,5578,5579,5580,5581,5582,5" +
            "583,5584,5585,5586,5587,5588,5589,5590,5591,5592,5593,5595,5596,5597,5598,5599,5" +
            "600,5602,5603,5604,5609,5764,5765,5767,5768,5769,5049,2690,3011,3083,5020,5038,5" +
            "040,5041,5043,5048,5050,5114,5115,5116,5117,5118,5119,5120,5121,5122,5123,5124,5" +
            "125,5126,5127,5128,5129,5130,5131,5132,5133,5134,5135,5136,5137,5138,5139,5140,5" +
            "141,5142,5143,5144,5145,5146,5147,5148,5149,5150,5151,5152,5153,5154,5155,5156,5" +
            "157,5158,5159,5160,5161,5162,5163,5164,5165,5166,5167,5168,5169,5170,5171,5172,5" +
            "173,5174,5175,5176,5177,5178,5179,5180,5181,5182,5183,5184,5185,5186,5187,5188,5" +
            "189,5190,5191,5192,5193,5195,5196,5197,5198,5199,5200,5201,5202,5203,5204,5205,5" +
            "206,5207,5208,5209,5210,5211,5212,5213,5214,5215,5216,5217,5218,5219,5220,5221,5" +
            "222,5223,5224,5225,5226,5227,5228,5229,5230,5231,5232,5239,5240,5241,5242,5243,5" +
            "244,5245,5246,5247,5248,5249,5250,5251,5252,5253,5254,5255,5256,5257,5258,5259,5" +
            "260,5261,5262,5263,5264,5265,5266,5267,5268,5270,5271,5272,5273,5278,5279,5280,5" +
            "281,5282,5283,5284,5285,5286,5287,5288,5289,5290,5291,5292,5293,5294,5295,5296,5" +
            "297,5298,5299,5300,5301,5302,5303,5304,5305,5306,5307,5308,5309,5310,5311,5312,5" +
            "313,5314,5315,5316,5317,5318,5319,5320,5321,5322,5323,5324,5325,5326,5327,5328,5" +
            "329,5330,5331,5332,5333,5334,5335,5336,5337,5338,5339,5340,5341,5342,5343,5344,5" +
            "345,5346,5347,5348,5349,5350,5351,5352,5353,5354,5355,5356,5358,5359,5360,5361,5" +
            "362,5363,5364,5365,5366,5367,5368,5369,5370,5371,5372,5374,5375,5376,5377,5378,5" +
            "379,5380,5381,5382,5383,5384,5385,5386,5387,5388,5389,5390,5391,5392,5393,5394,5" +
            "395,5396,5397,5398,5399,5400,5401,5402,5405,5406,5407,5408,5409,5410,5411,5412,5" +
            "413,5414,5415,5416,5417,5418,5419,5420,5421,5422,5423,5424,5425,5426,5427,5428,5" +
            "429,5430,5431,5432,5433,5434,5435,5436,5437,5438,5439,5440,5441,5442,5443,5444,5" +
            "445,5446,5447,5448,5449,5450,5451,5452,5453,5454,5455,5456,5457,5458,5459,5460,5" +
            "461,5462,5463,5464,5465,5466,5467,5468,5469,5470,5471,5472,5473,5474,5475,5476,5" +
            "477,5478,5479,5480,5481,5482,5483,5485,5486,5490,5491,5492,5493,5495,5496,5497,5" +
            "499,5500,5501,5502,5504,5505,5506,5507,5508,5511,5512,5513,5514,5515,5516,5517,5" +
            "518,5519,5520,5521,5522,5523,5524,5527,5529,5530,5531,5532,5533,5534,5535,5536,5" +
            "537,5538,5539,5540,5541,5542,5543,5544,5545,5546,5547,5548,5549,5550,5551,5552,5" +
            "553,5554,5555,5556,5557,5558,5559,5560,5561,5562,5563,5564,5565,5566,5567,5568,5" +
            "569,5570,5571,5572,5573,5574,5575,5576,5577,5578,5581,5582,5583,5584,5585,5586,5" +
            "587,5588,5589,5590,5591,5592,5593,5595,5596,5597,5598,5599,5600,5602,5603,5604,5" +
            "768,5769,5781,5800,1300067,1300068,1300081,1300082,1300105,1300106,1300107,13001" +
            "08,1300125,1300174,1300228,1300229,1300304,1300305,1300370,1300371,1300433,13004" +
            "58,1300594,1300604,1300605,1300606,1300674,1300748,1300749,1300750,1300799,13008" +
            "73,1300943,1300948,1300999,1301014,1400005,1400006,1400007,1400008,1400009,14000" +
            "10,1400011,1400012,1400013,1400014,1400015,1400017,1400018,1400019,1400020,14000" +
            "21,1400022,1400023,1400024,1400025,1400026,1400027,1400028,1400029,1400030,14000" +
            "31,1400032,1400033,1400034,1400035,1400036,1400037,1400038,1400039,1400040,14000" +
            "41,1400042,1400043,1400046,1400047,1400048,1400049,1400050,1400051,1400052,14000" +
            "53,1400054,1400055,1400056,1400057,1400058,1400059,1400060,1400061,1400062,14000" +
            "63,1400064,1400065,1400066,1400067,1400068,1400069,1400070,1400071,1400072,14000" +
            "73,1400074,1400075,1400076,1400077,1400078,1400079,1400080,1400081,1400082,14000" +
            "83,1400084,1400085,1400086,1400087,1400088,1400089,1400090,1400091,1400092,14000" +
            "93,1400094,1400095,1400096,1400097,1400098,1400099,1400100,1400101,1400102,14001" +
            "03,1400104,1400105,1400106,1400107,1400108,1400109,1400110,1400111,1400112,14001" +
            "13,1400114,1400115,1400116,1400117,1400118,1400119,1400120,1400121,1400122,14001" +
            "23,1400124,1400125,1400127,1400128,1400191,1400196,1400197,1400199,1400200,14002" +
            "03,1400211,1400270,1400271,1400272,1400273,1400274,1400275,1400276,1400428,14004" +
            "76,1400484,1400524,1400550,1400574,1400581,1400585,1400591,1400598,1400602,")]
        public string SkinBlackList {
            get {
                return ((string)(this["SkinBlackList"]));
            }
            set {
                this["SkinBlackList"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("{}")]
        public string SeerCloth {
            get {
                return ((string)(this["SeerCloth"]));
            }
            set {
                this["SeerCloth"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("")]
        public string BrowserFont {
            get {
                return ((string)(this["BrowserFont"]));
            }
            set {
                this["BrowserFont"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("976")]
        public decimal WinWidth {
            get {
                return ((decimal)(this["WinWidth"]));
            }
            set {
                this["WinWidth"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("624")]
        public decimal WinHeight {
            get {
                return ((decimal)(this["WinHeight"]));
            }
            set {
                this["WinHeight"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        public bool IsChangeBackground {
            get {
                return ((bool)(this["IsChangeBackground"]));
            }
            set {
                this["IsChangeBackground"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        public bool IsChangeAdPanel {
            get {
                return ((bool)(this["IsChangeAdPanel"]));
            }
            set {
                this["IsChangeAdPanel"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("")]
        public string AutoExecuteSoftwarePath1 {
            get {
                return ((string)(this["AutoExecuteSoftwarePath1"]));
            }
            set {
                this["AutoExecuteSoftwarePath1"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("998")]
        public int SkinRangeFloor {
            get {
                return ((int)(this["SkinRangeFloor"]));
            }
            set {
                this["SkinRangeFloor"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("2147483647")]
        public int SkinRangeCeiling {
            get {
                return ((int)(this["SkinRangeCeiling"]));
            }
            set {
                this["SkinRangeCeiling"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("")]
        public string RandomSkinExclusion {
            get {
                return ((string)(this["RandomSkinExclusion"]));
            }
            set {
                this["RandomSkinExclusion"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool IsUseSocketHack {
            get {
                return ((bool)(this["IsUseSocketHack"]));
            }
            set {
                this["IsUseSocketHack"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("")]
        public string AutoExecuteSoftwarePath2 {
            get {
                return ((string)(this["AutoExecuteSoftwarePath2"]));
            }
            set {
                this["AutoExecuteSoftwarePath2"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("")]
        public string AutoExecuteSoftwarePath3 {
            get {
                return ((string)(this["AutoExecuteSoftwarePath3"]));
            }
            set {
                this["AutoExecuteSoftwarePath3"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("1")]
        public string FlashZoom {
            get {
                return ((string)(this["FlashZoom"]));
            }
            set {
                this["FlashZoom"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        public bool IsChangeVipIcon {
            get {
                return ((bool)(this["IsChangeVipIcon"]));
            }
            set {
                this["IsChangeVipIcon"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("{\r\n  \"压血\": \"WxFightHandler.OnFirstRound = (fightStartInfo) => {\\n  WxFightHandler" +
            ".Utils.UseSkill(0);\\n};\\nWxFightHandler.OnUseSkill = (mySkillInfo,enemySkillInfo" +
            ") => {\\n  if (mySkillInfo.remainHP !== 0) {\\n    WxFightHandler.Utils.UseSkill(0" +
            ");\\n  }\\n  else {\\n    WxFightHandler.Utils.ChangePetByID(mySkillInfo,[]);\\n  }\\" +
            "n};\\nWxFightHandler.OnChangePet = (petInfo) => {\\n  WxFightHandler.Utils.UseSkil" +
            "l(0);\\n};\\nWxFightHandler.OnFightOver = (fightOverInfo) => {\\n  WxFightHandler.U" +
            "tils.StopAutoFight();\\n};\",\r\n  \"奇镰解放\": \"WxFightHandler.OnFirstRound = (fightStar" +
            "tInfo) => {\\n  WxFightHandler.Utils.UseSkill(36481);\\n};\\nWxFightHandler.OnUseSk" +
            "ill = (mySkillInfo,enemySkillInfo) => {\\n  if (mySkillInfo.remainHP !== 0) {\\n  " +
            "  WxFightHandler.Utils.UseSkill(36481);\\n  }\\n  else {\\n    console.log(\'Pet dea" +
            "d!\')\\n  }\\n};\\nWxFightHandler.OnChangePet = (petInfo) => {\\n};\\nWxFightHandler.O" +
            "nFightOver = (fightOverInfo) => {\\n};\",\r\n  \"月华\": \"WxFightHandler.OnFirstRound = " +
            "(fightStartInfo) => {\\n  WxFightHandler.YQYQ = 36354;\\n  WxFightHandler.BHLH = 3" +
            "6353;\\n  WxFightHandler.UseSkillBHLH = true;\\n  WxFightHandler.Utils.UseSkill(Wx" +
            "FightHandler.YQYQ);\\n};\\n\\nWxFightHandler.OnUseSkill = (mySkillInfo,enemySkillIn" +
            "fo) => {\\n  if (mySkillInfo.remainHP === 0) {\\n    WxFightHandler.Utils.StopAuto" +
            "Fight(); console.log(\'Pet dead!\');\\n    return;\\n  }\\n  for (var skill of mySkil" +
            "lInfo.skillList) {\\n    if (skill[0] === WxFightHandler.YQYQ) {\\n      if (skill" +
            "[1] === 0) {\\n        WxFightHandler.Utils.UsePetItem10PP();\\n        WxFightHan" +
            "dler.UseSkillBHLH = false;\\n        return;\\n      } else { break; }\\n    }\\n  }" +
            "\\n  WxFightHandler.Utils.UseSkill(WxFightHandler.UseSkillBHLH ? WxFightHandler.B" +
            "HLH : WxFightHandler.YQYQ);\\n  WxFightHandler.UseSkillBHLH = !WxFightHandler.Use" +
            "SkillBHLH;\\n};\\n\\nWxFightHandler.OnChangePet = (petInfo) => {};\\nWxFightHandler." +
            "OnFightOver = (fightOverInfo) => {};\",\r\n  \"弹伤_蒂朵\": \"// 草王、蒂朵、克罗、六界 弹伤，1级时空 补刀\\n\\" +
            "nWxFightHandler.OnFirstRound = (fightStartInfo) => {\\n  WxFightHandler.MORUIER =" +
            " 3322;\\n  WxFightHandler.LIUJIE = 3329;\\n  WxFightHandler.KELUO = 2977;\\n  WxFig" +
            "htHandler.DIDUO = 4377;\\n  WxFightHandler.SHIKONG = 3463;\\n  WxFightHandler.IsDI" +
            "DUOFirstUp = true;\\n  WxFightHandler.Utils.UseSkill(0);\\n};\\n\\nWxFightHandler.On" +
            "UseSkill = (mySkillInfo,enemySkillInfo) => {\\n  let petID = WxFightHandler.Utils" +
            ".GetFightingPetID();\\n  if (mySkillInfo.remainHP !== 0) {\\n    WxFightHandler.Ut" +
            "ils.UseSkill(0);\\n  }\\n  else {\\n    let changePetID = 0;\\n    if (WxFightHandle" +
            "r.MORUIER === petID) { changePetID = WxFightHandler.DIDUO; }\\n    else if (WxFig" +
            "htHandler.KELUO === petID) { changePetID = WxFightHandler.DIDUO; }\\n    else if " +
            "(WxFightHandler.DIDUO === petID) { changePetID = WxFightHandler.LIUJIE; }\\n    e" +
            "lse if (WxFightHandler.LIUJIE === petID) { changePetID = WxFightHandler.SHIKONG;" +
            " }\\n    WxFightHandler.Utils.ChangePetByID(mySkillInfo,[changePetID]);\\n  }\\n};\\" +
            "n\\nWxFightHandler.OnChangePet = (petInfo) => {\\n  let petID = petInfo.petID;\\n  " +
            "if (WxFightHandler.DIDUO === petID) {\\n    if (WxFightHandler.IsDIDUOFirstUp) {\\" +
            "n      WxFightHandler.Utils.ChangePetByID(petInfo,[WxFightHandler.KELUO]);\\n    " +
            "  WxFightHandler.IsDIDUOFirstUp = false;\\n    } else {\\n      WxFightHandler.Uti" +
            "ls.UseSkill(35914);\\n    }\\n  }\\n  else if (WxFightHandler.LIUJIE === petID) { W" +
            "xFightHandler.Utils.UseSkill(19314); }\\n  else if (WxFightHandler.SHIKONG === pe" +
            "tID) { WxFightHandler.Utils.UseSkill(31252); }\\n  else { WxFightHandler.Utils.Us" +
            "eSkill(0); }\\n};\\n\\nWxFightHandler.OnFightOver = (fightOverInfo) => {};\",\r\n  \"弹伤" +
            "_表姐\": \"// 表姐、六界 弹伤，圣谱 补刀\\n\\nWxFightHandler.OnFirstRound = (fightStartInfo) => {\\" +
            "n  WxFightHandler.BIAOJIE = 3512;\\n  WxFightHandler.LIUJIEDS = 3329;\\n  WxFightH" +
            "andler.LIUJIESW = 3045;\\n  WxFightHandler.SHENGPU = 5000;\\n  WxFightHandler.Util" +
            "s.UseSkill(31505);\\n};\\n\\nWxFightHandler.OnUseSkill = (mySkillInfo,enemySkillInf" +
            "o) => {\\n  let petID = WxFightHandler.Utils.GetFightingPetID();\\n  if (mySkillIn" +
            "fo.remainHP !== 0) {\\n    WxFightHandler.Utils.UseSkill(mySkillInfo.skillList[0]" +
            "[0]);\\n  }\\n  else {\\n    let changePetIDArray = [];\\n    if (WxFightHandler.BIA" +
            "OJIE === petID) { changePetIDArray.push(WxFightHandler.LIUJIEDS); changePetIDArr" +
            "ay.push(WxFightHandler.LIUJIESW); }\\n    else if (WxFightHandler.LIUJIE === petI" +
            "D) { changePetIDArray[0] = WxFightHandler.SHENGPU; }\\n    WxFightHandler.Utils.C" +
            "hangePetByID(mySkillInfo,changePetIDArray);\\n  }\\n};\\n\\nWxFightHandler.OnChangeP" +
            "et = (petInfo) => {\\n  let petID = petInfo.petID;\\n  if (WxFightHandler.LIUJIEDS" +
            " === petID || WxFightHandler.LIUJIESW ===petID) { WxFightHandler.Utils.UseSkill(" +
            "19314); }\\n  else if (WxFightHandler.SHENGPU === petID) { WxFightHandler.Utils.U" +
            "seSkill(31143); }\\n  else { WxFightHandler.Utils.UseSkill(0); }\\n};\\n\\nWxFightHa" +
            "ndler.OnFightOver = (fightOverInfo) => {};\",\r\n  \"借金火\": \"// 2024 7月 正常运行\\n// 在未来，" +
            "所有的数据结构都可能会发生变动，所以不保证永远有效\\n\\n(async () =>\\n    {\\n      let FIRE_BLUE_SMALL = 2;" +
            "\\n      let FIRE_PURPLE_SMALL = 3;\\n      let FIRE_GOLD_SMALL = 4;\\n      let FI" +
            "RE_GREEN_SMALL = 5;\\n      let FIRE_GREEN_BIG = 6;\\n      let FIRE_BLUE_BIG = 7;" +
            "\\n      let FIRE_PURPLE_BIG = 8;\\n      let FIRE_GOLD_BIG = 9;\\n    \\n      func" +
            "tion ReadInt(data)\\n      {\\n        return (data.byteArray[data.position++] << " +
            "24) + (data.byteArray[data.position++] << 16) + (data.byteArray[data.position++]" +
            " << 8) + data.byteArray[data.position++];\\n      }\\n    \\n      function ReadByt" +
            "e(data)\\n      {\\n        return data.byteArray[data.position++];\\n      }\\n    " +
            "\\n      class UserInfo\\n      {\\n        constructor(data)\\n        {\\n         " +
            " data.position += 4; // 不需要的数据就跳过\\n          this.userID = ReadInt(data);\\n     " +
            "     data.position += 16;\\n          this.curTitle = ReadInt(data); // 称号\\n     " +
            "     data.position += 137;\\n          let loopTimes = ReadInt(data); // 这里有一段循环\\" +
            "n          for (let i = 0; i < loopTimes; ++i)\\n          {\\n            ReadInt" +
            "(data);\\n          }\\n          data.position += 60;\\n          // 套装\\n         " +
            " loopTimes = ReadInt(data);\\n          this.clothes = [];\\n          for (let i " +
            "= 0; i < loopTimes; ++i)\\n          {\\n            this.clothes[i] = ReadInt(dat" +
            "a);\\n            ReadInt(data);\\n          }\\n          data.position += 4;\\n   " +
            "       this.fireBuff = ReadByte(data);\\n          data.position += 28;\\n        " +
            "}\\n      }\\n    \\n      // 获取\\n      let data = {};\\n      data.byteArray = awai" +
            "t WxFightHandler.Utils.SendAsync(2003,[]);\\n      data.position = 0;\\n      \\n  " +
            "    // 解析\\n      let playerCount = ReadInt(data);\\n      for (let i = 0; i < pla" +
            "yerCount; ++i)\\n      {\\n        let player = new UserInfo(data);\\n        if (p" +
            "layer.fireBuff == FIRE_GOLD_BIG || player.fireBuff == FIRE_GOLD_SMALL) \\n       " +
            " {\\n          WxFightHandler.Utils.Send(4292,player.userID); console.log(\'借火成功\')" +
            "; return;\\n        }\\n      }\\n      console.log(\'借火失败\');\\n    })();\",\r\n  \"一直第五\"" +
            ": \"// 适用于 pve\\nWxFightHandler.OnFirstRound = (fightStartInfo) => {\\n  let skillA" +
            "rray = WxFightHandler.Utils.GetPetInfos()[0].skillArray;\\n  WxFightHandler.Utils" +
            ".UseSkill(skillArray.length < 5 ? 0 : 4); // 若无第五，则用一技能\\n};\\n\\nWxFightHandler.On" +
            "UseSkill = (mySkillInfo,enemySkillInfo) => {\\n  let petID = WxFightHandler.Utils" +
            ".GetFightingPetID(); console.log(\'onUseSkill\',mySkillInfo)\\n  if (mySkillInfo.re" +
            "mainHP !== 0) {\\n    let skillList = mySkillInfo.skillList;\\n    let useSkillInd" +
            "ex = skillList.length < 5 ? 0 : 4;\\n    if (skillList[useSkillIndex][1] > 0) {\\n" +
            "      WxFightHandler.Utils.UseSkill(skillList[useSkillIndex][0]);\\n    }\\n    el" +
            "se {\\n      WxFightHandler.Utils.UsePetItem(300017); WxFightHandler.Utils.WxItem" +
            "Buy(300017);\\n    }\\n  }\\n  else {\\n    WxFightHandler.Utils.ChangePetByID(mySki" +
            "llInfo,[]);\\n  }\\n};\\n\\nWxFightHandler.OnChangePet = (petInfo) => {\\n  let skill" +
            "List = petInfo.skillList;\\n  WxFightHandler.Utils.UseSkill(skillList[skillList.l" +
            "ength < 5 ? 0 : 4][0]);\\n};\\n\\nWxFightHandler.OnFightOver = (fightOverInfo) => {" +
            "};\",\r\n  \"奇镰解放_延时\": \"WxFightHandler.OnFirstRound = (fightStartInfo) => {\\n  WxFig" +
            "htHandler.Utils.UseSkill(36481);\\n};\\nWxFightHandler.OnUseSkill = (mySkillInfo,e" +
            "nemySkillInfo) => {\\n  if (mySkillInfo.remainHP !== 0) {\\n    setTimeout(() => {" +
            " WxFightHandler.Utils.UseSkill(36481); }, 200);\\n  }\\n  else {\\n    console.log(" +
            "\'Pet dead!\')\\n  }\\n};\\nWxFightHandler.OnChangePet = (petInfo) => {\\n};\\nWxFightH" +
            "andler.OnFightOver = (fightOverInfo) => {\\n};\"\r\n}")]
        public string FlashFightTemplate {
            get {
                return ((string)(this["FlashFightTemplate"]));
            }
            set {
                this["FlashFightTemplate"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("{\"换色\": \"NonoColorChangePanel\"}")]
        public string ActivityCollection {
            get {
                return ((string)(this["ActivityCollection"]));
            }
            set {
                this["ActivityCollection"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool AutoLoadActivities {
            get {
                return ((bool)(this["AutoLoadActivities"]));
            }
            set {
                this["AutoLoadActivities"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool AutoLoadFightHandler {
            get {
                return ((bool)(this["AutoLoadFightHandler"]));
            }
            set {
                this["AutoLoadFightHandler"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool AutoLoadPetBag {
            get {
                return ((bool)(this["AutoLoadPetBag"]));
            }
            set {
                this["AutoLoadPetBag"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool AutoLoadScreenShot {
            get {
                return ((bool)(this["AutoLoadScreenShot"]));
            }
            set {
                this["AutoLoadScreenShot"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool AutoLoadH5Pack {
            get {
                return ((bool)(this["AutoLoadH5Pack"]));
            }
            set {
                this["AutoLoadH5Pack"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool AutoLoadFlashMap {
            get {
                return ((bool)(this["AutoLoadFlashMap"]));
            }
            set {
                this["AutoLoadFlashMap"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("{}")]
        public string SpecificPetSkins {
            get {
                return ((string)(this["SpecificPetSkins"]));
            }
            set {
                this["SpecificPetSkins"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("")]
        public string FiddleObjects {
            get {
                return ((string)(this["FiddleObjects"]));
            }
            set {
                this["FiddleObjects"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool AutoLoadFD {
            get {
                return ((bool)(this["AutoLoadFD"]));
            }
            set {
                this["AutoLoadFD"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("https://seer.61.com/play.shtml")]
        public string DefaultURL {
            get {
                return ((string)(this["DefaultURL"]));
            }
            set {
                this["DefaultURL"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("1")]
        public int FavouriteMap {
            get {
                return ((int)(this["FavouriteMap"]));
            }
            set {
                this["FavouriteMap"] = value;
            }
        }
    }
}
